@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": false, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "BothDirections" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 0,
    "showDetailedClassStructure": true
  },
  "rootClass": "de.dhbw.karlsruhe.ase.application.GameEndObserver",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    
subgraph cluster_3082201 {
   	label=application
	labeljust=l
	fillcolor="#ececec"
	style=filled

'nodes 
GameEndObserver1052887806[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(I)GameEndObserver</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ update(newState: GameResult)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#F1E5FD"
];

GameEndObservable1052887806[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(I)GameEndObservable</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ notifyObservers(newState: GameResult)</TD></TR>
<TR><TD ALIGN="LEFT" >+ register(observer: GameEndObserver)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#F1E5FD"
];

GameState1052887806[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GameState</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   camp: Camp [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   deck: CardDeck [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   invalidator: CardInvalidator [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   observers: List&lt;GameEndObserver&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   phase: GamePhase [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   result: GameResult [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   status: GameStatus [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   uuid: UUID [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ notifyObservers(newState: GameResult)</TD></TR>
<TR><TD ALIGN="LEFT" >+ register(observer: GameEndObserver)</TD></TR>
<TR><TD ALIGN="LEFT" >+ reinitialize(): GameState</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

}

subgraph cluster_3082202 {
   	label=plugin
	labeljust=l
	fillcolor="#ececec"
	style=filled

	subgraph cluster_811044466 {
       	label=cli
    	labeljust=l
    	fillcolor="#d8d8d8"
    	style=filled

GameEndReporter1857742349[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GameEndReporter</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   resultToReport: GameResult [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ report()</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(newState: GameResult)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Main1857742349[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Main</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

}
}

'edges    
GameEndObserver1052887806 -> GameEndReporter1857742349[arrowhead=none, arrowtail=empty, dir=both];
GameEndObservable1052887806 -> GameState1052887806[arrowhead=none, arrowtail=empty, dir=both];

GameState1052887806 -> GameEndObserver1052887806[label="observers
[0..*]"];
Main1857742349 -> GameEndReporter1857742349[label="main() -> report()"];
    
}
@enduml