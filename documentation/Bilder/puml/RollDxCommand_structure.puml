@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": true,
    "cutEnum": false,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": false
  },
  "graphTraversal": {
    "forwardDepth": 0,
    "backwardDepth": 2,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": false, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "BothDirections" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 0,
    "showDetailedClassStructure": true
  },
  "rootClass": "de.dhbw.karlsruhe.ase.plugin.cli.commands.RollDxCommand",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 


Command1857742349[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(I)Command</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ execute(game: Game)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#F1E5FD"
];





Main1857742349[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Main</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];





SaveGameCommand1702927325[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SaveGameCommand</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ SaveGameCommand()</TD></TR>
<TR><TD ALIGN="LEFT" >+ execute(game: Game)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#EEEEEE"
];

RollDxCommand1702927325[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RollDxCommand</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   roll: Roll [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ RollDxCommand(roll: Roll)</TD></TR>
<TR><TD ALIGN="LEFT" >+ execute(game: Game)</TD></TR>
<TR><TD ALIGN="LEFT" >+ roll(): Roll</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ShowBuildablesCommand1702927325[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ShowBuildablesCommand</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ ShowBuildablesCommand()</TD></TR>
<TR><TD ALIGN="LEFT" >+ execute(game: Game)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#EEEEEE"
];


'
'StartCommand1702927325[
'	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
'<TR><TD ALIGN="LEFT" >(C)StartCommand</TD></TR>
'<HR/>
'<TR><TD ALIGN="LEFT" >-   cards: List&lt;Card&gt; [0..*]</TD></TR>
'<HR/>
'<TR><TD ALIGN="LEFT" >+ StartCommand(cards: List&lt;Card&gt;)</TD></TR>
'<TR><TD ALIGN="LEFT" >+ cards(): List&lt;Card&gt;</TD></TR>
'<TR><TD ALIGN="LEFT" >+ execute(game: Game)</TD></TR>
'</TABLE>>
'	style=filled
'	margin=0
'	shape=plaintext
'	fillcolor="#FFFFFF"
'];

'edges    
Command1857742349 -> RollDxCommand1702927325[arrowhead=none, arrowtail=empty, dir=both];
Command1857742349 -> SaveGameCommand1702927325[arrowhead=none, arrowtail=empty, dir=both];
Command1857742349 -> ShowBuildablesCommand1702927325[arrowhead=none, arrowtail=empty, dir=both];
'Command1857742349 -> StartCommand1702927325[arrowhead=none, arrowtail=empty, dir=both];

Main1857742349 -> Command1857742349[label="main() -> execute()"];
    
}
@enduml